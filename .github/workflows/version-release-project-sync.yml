name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          BRANCH=$(echo "$ISSUE_BODY" | grep -A1 '### Branch' | tail -n1 | xargs)
          STATUS=$(echo "$ISSUE_BODY" | awk '/### Status/{getline; while($0 ~ /^$/) { getline }; print $0 }' | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT

          VERSION=$(echo "$ISSUE_BODY" | grep -A1 '### Version' | tail -n1 | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Sync with GitHub Project (VersionReleases)
        if: steps.parse.outputs.status == 'done'
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
        with:
          script: |
            const repo = '${{ steps.parse.outputs.repository }}';
            const branch = '${{ steps.parse.outputs.branch }}';
            const version = '${{ steps.parse.outputs.version }}';
            const status = '${{ steps.parse.outputs.status }}';
            const org = 'Adama-com';
            const projectNumber = 1;
            
            // Step 1: Get project ID and fields with proper fragment handling
            const projectQuery = await github.graphql(`
              query {
                organization(login: "${org}") {
                  projectV2(number: ${projectNumber}) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);
            
            const project = projectQuery.organization.projectV2;
            console.log("Project ID:", project.id);
            
            // Build field map
            const fieldMap = {};
            project.fields.nodes.forEach(field => {
              fieldMap[field.name] = field;
            });
            
            // Step 2: Find existing item or create new one
            const itemsQuery = await github.graphql(`
              query {
                organization(login: "${org}") {
                  projectV2(number: ${projectNumber}) {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            title
                            repository {
                              nameWithOwner
                            }
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                ... on ProjectV2SingleSelectField {
                                  name
                                }
                              }
                              name
                            }
                            ... on ProjectV2ItemFieldTextValue {
                              field {
                                ... on ProjectV2Field {
                                  name
                                }
                              }
                              text
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);
            
            const items = itemsQuery.organization.projectV2.items.nodes;
            
            const match = items.find(item => {
              if (!item.content?.repository?.nameWithOwner === repo) return false;
              
              const branchValue = item.fieldValues.nodes.find(f => 
                f.field?.name === 'Branch' && f.name === branch
              );
              
              return !!branchValue;
            });
            
            console.log("Match found:", !!match);
            
            // Step 3: Update fields or create new item
            async function updateFields(itemId) {
              // Update Branch
              const branchField = fieldMap['Branch'];
              if (branchField && branch) {
                const branchOption = branchField.options?.find(opt => opt.name === branch);
                if (branchOption) {
                  await github.graphql(`
                    mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                      updateProjectV2ItemFieldValue(input: $input) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `, { 
                    input: {
                      projectId: project.id,
                      itemId: itemId,
                      fieldId: branchField.id,
                      value: {
                        singleSelectOptionId: branchOption.id
                      }
                    }
                  });
                  console.log("Updated Branch field");
                }
              }
              
              // Update Version
              const versionField = fieldMap['Current Version'];
              if (versionField && version) {
                await github.graphql(`
                  mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                    updateProjectV2ItemFieldValue(input: $input) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `, { 
                  input: {
                    projectId: project.id,
                    itemId: itemId,
                    fieldId: versionField.id,
                    value: {
                      text: version
                    }
                  }
                });
                console.log("Updated Version field");
              }
              
              // Update Status
              const statusField = fieldMap['Status'];
              if (statusField && status) {
                const statusOption = statusField.options?.find(opt => 
                  opt.name.toLowerCase() === status.toLowerCase()
                );
                if (statusOption) {
                  await github.graphql(`
                    mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                      updateProjectV2ItemFieldValue(input: $input) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `, { 
                    input: {
                      projectId: project.id,
                      itemId: itemId,
                      fieldId: statusField.id,
                      value: {
                        singleSelectOptionId: statusOption.id
                      }
                    }
                  });
                  console.log("Updated Status field");
                }
              }
              
              // Update Repository (if it's a field in your project)
              const repoField = fieldMap['Repository'];
              if (repoField && repo) {
                await github.graphql(`
                  mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                    updateProjectV2ItemFieldValue(input: $input) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `, { 
                  input: {
                    projectId: project.id,
                    itemId: itemId,
                    fieldId: repoField.id,
                    value: {
                      text: repo
                    }
                  }
                });
                console.log("Updated Repository field");
              }
            }
            
            let itemId;
            if (match) {
              console.log("Item found — updating");
              itemId = match.id;
            } else {
              console.log("No match — creating new item");
              const newItem = await github.graphql(`
                mutation {
                  addProjectV2ItemById(input: {
                    projectId: "${project.id}",
                    contentId: "${{ github.event.issue.node_id }}"
                  }) {
                    item {
                      id
                    }
                  }
                }
              `);
              itemId = newItem.addProjectV2ItemById.item.id;
            }
            
            await updateFields(itemId);
            console.log("Project sync completed successfully");
