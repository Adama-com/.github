name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          BRANCH=$(echo "$ISSUE_BODY" | grep -A1 '### Branch' | tail -n1 | xargs)
          STATUS=$(echo "$ISSUE_BODY" | awk '/### Status/{getline; while($0 ~ /^$/) { getline }; print $0 }' | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT

          VERSION=$(echo "$ISSUE_BODY" | grep -A1 '### Version' | tail -n1 | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Sync with GitHub Project
        if: steps.parse.outputs.status == 'done'
        env:
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
          BRANCH: ${{ steps.parse.outputs.branch }}
          VERSION: ${{ steps.parse.outputs.version }}
          STATUS: ${{ steps.parse.outputs.status }}
          REPO: ${{ steps.parse.outputs.repository }}
          # Use GITHUB_TOKEN for this workflow
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
        run: |
          echo "Syncing issue to project..."
          
          # Install the GitHub CLI if needed
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found, installing..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # First, try to find issue cards in projects for this repo
          echo "Looking for issue cards..."
          gh api graphql -f query='
            query($issueId:ID!) {
              node(id:$issueId) {
                ... on Issue {
                  title
                  repository {
                    nameWithOwner
                  }
                  projectCards {
                    nodes {
                      project {
                        name
                        number
                      }
                      column {
                        name
                      }
                    }
                  }
                }
              }
            }
          ' -F issueId="$ISSUE_NODE_ID" > issue_info.json
          
          cat issue_info.json
          
          # Create a simple text file with the issue details for the project
          cat > issue_details.md <<EOL
          # Issue Details
          
          - **Branch:** $BRANCH
          - **Version:** $VERSION
          - **Status:** $STATUS
          - **Repository:** $REPO
          
          *This card was automatically created by a GitHub Action workflow.*
          EOL
          
          # Try using the GitHub CLI to create a project item on all organization projects
          echo "Trying to add to organization projects..."

          # Install jq if it's not already installed
          sudo apt-get install -y jq
          
          # Use custom token to list organization projects
          PROJECTS_RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/Adama-com/projects")
            
          echo "Projects response:"
          echo "$PROJECTS_RESPONSE" | jq .
          
          # Try to get active projects
          PROJECT_IDS=$(echo "$PROJECTS_RESPONSE" | jq -r '.[] | select(.state=="open") | .id')
          
          if [ -z "$PROJECT_IDS" ]; then
            echo "No open projects found. Creating a note instead."
            
            # Create an issue comment instead with the details
            gh issue comment "${{ github.event.issue.number }}" --body "$(cat issue_details.md)"
            
            echo "Added details as a comment on the issue."
          else
            echo "Found open projects: $PROJECT_IDS"
            
            # For each project, try to add a card
            for PROJECT_ID in $PROJECT_IDS; do
              echo "Adding note to project $PROJECT_ID..."
              
              # Get columns for this project
              COLUMNS_RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/projects/$PROJECT_ID/columns")
                
              echo "Columns response:"
              echo "$COLUMNS_RESPONSE" | jq .
              
              # Get first column ID
              COLUMN_ID=$(echo "$COLUMNS_RESPONSE" | jq -r '.[0].id')
              
              if [ -n "$COLUMN_ID" ]; then
                echo "Adding card to column $COLUMN_ID..."
                
                # Create card with note
                CARD_RESPONSE=$(curl -s -X POST \
                  -H "Authorization: Bearer $GH_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/projects/columns/$COLUMN_ID/cards" \
                  -d "{\"note\": \"$(cat issue_details.md | sed 's/"/\\"/g' | tr '\n' ' ')\"}")
                  
                echo "Card creation response:"
                echo "$CARD_RESPONSE" | jq .
                
                CARD_ID=$(echo "$CARD_RESPONSE" | jq -r '.id')
                
                if [ -n "$CARD_ID" ] && [ "$CARD_ID" != "null" ]; then
                  echo "Successfully created card with ID: $CARD_ID"
                else
                  echo "Failed to create card. Check response for errors."
                fi
              else
                echo "No columns found for project $PROJECT_ID"
              fi
            done
          fi
          
          echo "Also adding details as a comment on the issue for backup..."
          gh issue comment "${{ github.event.issue.number }}" --body "$(cat issue_details.md)"
          
          echo "Sync completed."
