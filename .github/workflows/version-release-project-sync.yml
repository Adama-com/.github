name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          BRANCH=$(echo "$ISSUE_BODY" | grep -A1 '### Branch' | tail -n1 | xargs)
          STATUS=$(echo "$ISSUE_BODY" | awk '/### Status/{getline; while($0 ~ /^$/) { getline }; print $0 }' | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT

          VERSION=$(echo "$ISSUE_BODY" | grep -A1 '### Version' | tail -n1 | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Sync with GitHub Project
        if: steps.parse.outputs.status == 'done'
        env:
          BRANCH: ${{ steps.parse.outputs.branch }}
          VERSION: ${{ steps.parse.outputs.version }}
          STATUS: ${{ steps.parse.outputs.status }}
          REPO: ${{ steps.parse.outputs.repository }}
          # This is essential for the GitHub CLI to work
          TOKEN: ${{ secrets.PROJECTS_PAT }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "Syncing issue to project..."
          
          # Create a simple text file with the issue details for the project
          cat > issue_details.md << EOF
          # Issue Details
          
          - **Branch:** $BRANCH
          - **Version:** $VERSION
          - **Status:** $STATUS
          - **Repository:** $REPO
          
          *This card was automatically created by a GitHub Action workflow.*
          EOF
          
          # Try using curl directly with the REST API
          echo "Trying to add to organization projects using REST API..."

          # Install jq if it's not already installed
          sudo apt-get install -y jq
          
          # Use token to list organization projects
          echo "Listing organization projects..."
          PROJECTS_RESPONSE=$(curl -s \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/Adama-com/projects")
            
          echo "Projects response:"
          echo "$PROJECTS_RESPONSE" | jq .
          
          # Try to get active projects
          PROJECT_IDS=$(echo "$PROJECTS_RESPONSE" | jq -r '.[] | select(.state=="open") | .id')
          
          if [ -z "$PROJECT_IDS" ]; then
            echo "No open projects found, trying to add directly to repository projects..."
            
            # Try repository projects instead
            REPO_PROJECTS_RESPONSE=$(curl -s \
              -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/projects")
              
            echo "Repository projects response:"
            echo "$REPO_PROJECTS_RESPONSE" | jq .
            
            PROJECT_IDS=$(echo "$REPO_PROJECTS_RESPONSE" | jq -r '.[] | select(.state=="open") | .id')
          fi
          
          if [ -z "$PROJECT_IDS" ]; then
            echo "No open projects found. Creating issue comment instead."
            
            # Create an issue comment with the details using curl
            echo "Adding comment to issue #$ISSUE_NUMBER..."
            COMMENT_BODY=$(cat issue_details.md)
            COMMENT_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments" \
              -d "{\"body\": $(echo "$COMMENT_BODY" | jq -sR .)}")
              
            echo "Comment response:"
            echo "$COMMENT_RESPONSE" | jq .
            
            echo "Added details as a comment on the issue."
          else
            echo "Found open projects: $PROJECT_IDS"
            
            # For each project, try to add a card
            for PROJECT_ID in $PROJECT_IDS; do
              echo "Adding note to project $PROJECT_ID..."
              
              # Get columns for this project
              COLUMNS_RESPONSE=$(curl -s \
                -H "Authorization: token $TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/projects/$PROJECT_ID/columns")
                
              echo "Columns response:"
              echo "$COLUMNS_RESPONSE" | jq .
              
              # Get first column ID
              COLUMN_ID=$(echo "$COLUMNS_RESPONSE" | jq -r '.[0].id')
              
              if [ -n "$COLUMN_ID" ]; then
                echo "Adding card to column $COLUMN_ID..."
                
                # Create card with note
                NOTE_CONTENT=$(cat issue_details.md)
                CARD_RESPONSE=$(curl -s -X POST \
                  -H "Authorization: token $TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/projects/columns/$COLUMN_ID/cards" \
                  -d "{\"note\": $(echo "$NOTE_CONTENT" | jq -sR .)}")
                  
                echo "Card creation response:"
                echo "$CARD_RESPONSE" | jq .
                
                CARD_ID=$(echo "$CARD_RESPONSE" | jq -r '.id')
                
                if [ -n "$CARD_ID" ] && [ "$CARD_ID" != "null" ]; then
                  echo "Successfully created card with ID: $CARD_ID"
                else
                  echo "Failed to create card. Check response for errors."
                fi
              else
                echo "No columns found for project $PROJECT_ID"
              fi
            done
            
            # Also add a comment to the issue as a backup
            echo "Adding comment to issue #$ISSUE_NUMBER as a backup..."
            COMMENT_BODY=$(cat issue_details.md)
            COMMENT_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments" \
              -d "{\"body\": $(echo "$COMMENT_BODY" | jq -sR .)}")
              
            echo "Comment response:"
            echo "$COMMENT_RESPONSE" | jq .
          fi
          
          echo "Sync completed."
