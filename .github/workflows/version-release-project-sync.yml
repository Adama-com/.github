name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          BRANCH=$(echo "$ISSUE_BODY" | grep -A1 '### Branch' | tail -n1 | xargs)
          STATUS=$(echo "$ISSUE_BODY" | awk '/### Status/{getline; while($0 ~ /^$/) { getline }; print $0 }' | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT

          VERSION=$(echo "$ISSUE_BODY" | grep -A1 '### Version' | tail -n1 | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Sync with GitHub Project
        if: steps.parse.outputs.status == 'done'
        run: |
          echo "Using built-in GITHUB_TOKEN instead of custom token"
          
          BRANCH="${{ steps.parse.outputs.branch }}"
          VERSION="${{ steps.parse.outputs.version }}"
          STATUS="${{ steps.parse.outputs.status }}"
          REPO="${{ steps.parse.outputs.repository }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ORG="Adama-com"
          
          # First, let's list all projects in the organization
          echo "Listing organization projects..."
          
          ORG_PROJECTS=$(curl -s -X GET \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/$ORG/projects?per_page=10")
          
          echo "Organization projects (REST API):"
          echo "$ORG_PROJECTS" | jq .
          
          # Now try using the default token to query projects via GraphQL
          PROJECTS_QUERY='{
            "query": "query { organization(login: \"'$ORG'\") { projectsV2(first: 10) { nodes { id number title } } } }"
          }'
          
          echo "GraphQL query: $PROJECTS_QUERY"
          
          PROJECTS_RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$PROJECTS_QUERY")
          
          echo "Projects response (GraphQL):"
          echo "$PROJECTS_RESPONSE" | jq .
          
          # Try to find the project using REST API instead
          echo "Looking for projects with 'VersionRelease' in the title..."
          
          # Extract project number if available
          PROJECT_NUMBER=$(echo "$ORG_PROJECTS" | jq -r '.[] | select(.name | contains("VersionRelease")) | .number' | head -n 1)
          
          if [ -z "$PROJECT_NUMBER" ]; then
            echo "No VersionRelease project found. Using first project if available..."
            PROJECT_NUMBER=$(echo "$ORG_PROJECTS" | jq -r '.[0].number')
          fi
          
          if [ -z "$PROJECT_NUMBER" ]; then
            echo "No projects found. Please check permissions."
            exit 1
          fi
          
          echo "Using project number: $PROJECT_NUMBER"
          
          # Get project fields
          echo "Getting project fields..."
          
          PROJECT_FIELDS=$(curl -s -X GET \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/projects/$PROJECT_NUMBER/columns")
          
          echo "Project fields:"
          echo "$PROJECT_FIELDS" | jq .
          
          # Create a new card for the issue
          echo "Creating a new card for issue #$ISSUE_NUMBER..."
          
          # First get the default column id
          DEFAULT_COLUMN_ID=$(echo "$PROJECT_FIELDS" | jq -r '.[0].id')
          
          if [ -n "$DEFAULT_COLUMN_ID" ]; then
            # Create the card
            CREATE_CARD=$(curl -s -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Content-Type: application/json" \
              "https://api.github.com/projects/columns/$DEFAULT_COLUMN_ID/cards" \
              -d "{\"note\":\"Issue #$ISSUE_NUMBER: $ISSUE_TITLE\\nBranch: $BRANCH\\nVersion: $VERSION\\nStatus: $STATUS\\nRepository: $REPO\"}")
            
            echo "Card creation response:"
            echo "$CREATE_CARD" | jq .
            
            CARD_ID=$(echo "$CREATE_CARD" | jq -r '.id')
            
            if [ -n "$CARD_ID" ] && [ "$CARD_ID" != "null" ]; then
              echo "Successfully created card with ID: $CARD_ID"
              echo "Project sync completed successfully."
            else
              echo "Failed to create card. Check permissions."
              exit 1
            fi
          else
            echo "Could not find a column in the project. Check project structure."
            exit 1
          fi
