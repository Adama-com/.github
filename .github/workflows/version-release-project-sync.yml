name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          BRANCH=$(echo "$ISSUE_BODY" | grep -A1 '### Branch' | tail -n1 | xargs)
          STATUS=$(echo "$ISSUE_BODY" | awk '/### Status/{getline; while($0 ~ /^$/) { getline }; print $0 }' | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT

          VERSION=$(echo "$ISSUE_BODY" | grep -A1 '### Version' | tail -n1 | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Add Comment to Issue
        if: steps.parse.outputs.status == 'done'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const branch = '${{ steps.parse.outputs.branch }}';
            const version = '${{ steps.parse.outputs.version }}';
            const status = '${{ steps.parse.outputs.status }}';
            const repo = '${{ steps.parse.outputs.repository }}';
            
            // Create comment body
            const commentBody = `
            # Version Release Sync
            
            This issue has been processed by the Version Release Sync workflow with the following details:
            
            - **Branch:** ${branch}
            - **Version:** ${version}
            - **Status:** ${status}
            - **Repository:** ${repo}
            
            Since automatic project syncing encountered authorization issues, please manually add this to the appropriate project.
            `;
            
            // Add comment to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            
            console.log('Added comment to issue #' + context.issue.number);
            
            // Try to create a label to indicate status
            try {
              // First check if the label exists
              const statusLabel = `status:${status.toLowerCase().replace(/\s+/g, '-')}`;
              
              try {
                // Try to get the label
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: statusLabel
                });
                
                console.log(`Label ${statusLabel} exists. Adding to issue...`);
              } catch (error) {
                // Label doesn't exist, create it
                console.log(`Label ${statusLabel} doesn't exist. Creating...`);
                
                // Generate a color based on status
                let color = '0075ca'; // default blue
                if (status.toLowerCase().includes('done')) {
                  color = '0e8a16'; // green
                } else if (status.toLowerCase().includes('progress')) {
                  color = 'fbca04'; // yellow
                }
                
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: statusLabel,
                  color: color,
                  description: `Issue with status: ${status}`
                });
                
                console.log(`Created label ${statusLabel}`);
              }
              
              // Add the label to the issue
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [statusLabel]
              });
              
              console.log(`Added label ${statusLabel} to issue #${context.issue.number}`);
            } catch (error) {
              console.log(`Error handling labels: ${error.message}`);
            }
            
            // Try to add a final notification summarizing what happened
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `ðŸ“Œ **Workflow Summary:** Added detailed comment and applied status label. Please manually add this issue to your project tracking board.`
              });
            } catch (error) {
              console.log('Failed to add summary comment: ' + error.message);
            }
