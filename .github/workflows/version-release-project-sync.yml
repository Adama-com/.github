name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          BRANCH=$(echo "$ISSUE_BODY" | grep -A1 '### Branch' | tail -n1 | xargs)
          STATUS=$(echo "$ISSUE_BODY" | awk '/### Status/{getline; while($0 ~ /^$/) { getline }; print $0 }' | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT

          VERSION=$(echo "$ISSUE_BODY" | grep -A1 '### Version' | tail -n1 | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      # Use GitHub CLI to find and update project
      - name: Setup GitHub CLI
        if: steps.parse.outputs.status == 'done'
        uses: cli/cli@v2

      - name: Create or Update Project Item
        if: steps.parse.outputs.status == 'done'
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
          GITHUB_TOKEN: ${{ secrets.PROJECTS_PAT }}
          BRANCH: ${{ steps.parse.outputs.branch }}
          VERSION: ${{ steps.parse.outputs.version }}
          STATUS: ${{ steps.parse.outputs.status }}
          REPO: ${{ steps.parse.outputs.repository }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
          ORG: "Adama-com"
        run: |
          echo "Testing token permissions..."
          
          # List organization projects directly since we know the org name
          echo "Listing organization projects..."
          gh api graphql -f query='
            query {
              organization(login: "'$ORG'") {
                projectsV2(first: 10) {
                  nodes {
                    id
                    number
                    title
                  }
                }
              }
            }
          ' | tee projects.json
          
          # Extract the first project ID, number and title
          PROJECT_ID=$(jq -r '.data.organization.projectsV2.nodes[0].id' projects.json)
          PROJECT_NUMBER=$(jq -r '.data.organization.projectsV2.nodes[0].number' projects.json)
          PROJECT_TITLE=$(jq -r '.data.organization.projectsV2.nodes[0].title' projects.json)
          
          echo "Using project: $PROJECT_TITLE (#$PROJECT_NUMBER)"
          echo "Project ID: $PROJECT_ID"
          
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "No projects found. Please check permissions."
            exit 1
          fi
          
          # Get the fields for this project
          echo "Getting project fields..."
          gh api graphql -f query='
            query {
              node(id: "'$PROJECT_ID'") {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }
          ' | tee fields.json
          
          # Extract field IDs
          VERSION_FIELD_ID=$(jq -r '.data.node.fields.nodes[] | select(.name=="Current Version") | .id' fields.json)
          
          # For single select fields we need to find both field ID and option ID
          BRANCH_FIELD_ID=$(jq -r '.data.node.fields.nodes[] | select(.name=="Branch") | .id' fields.json)
          STATUS_FIELD_ID=$(jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id' fields.json)
          REPO_FIELD_ID=$(jq -r '.data.node.fields.nodes[] | select(.name=="Repository") | .id' fields.json)
          
          # Extract options for single select fields
          BRANCH_OPTIONS=$(jq -r '.data.node.fields.nodes[] | select(.name=="Branch") | .options[]' fields.json 2>/dev/null || echo "")
          STATUS_OPTIONS=$(jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[]' fields.json 2>/dev/null || echo "")
          
          echo "Field IDs found:"
          echo "Branch: $BRANCH_FIELD_ID"
          echo "Version: $VERSION_FIELD_ID"
          echo "Status: $STATUS_FIELD_ID"
          echo "Repository: $REPO_FIELD_ID"
          
          # Find the option IDs for branch and status
          BRANCH_OPTION_ID=""
          if [ -n "$BRANCH_OPTIONS" ]; then
            BRANCH_OPTION_ID=$(echo "$BRANCH_OPTIONS" | jq -r 'select(.name=="'$BRANCH'") | .id' 2>/dev/null || echo "")
            echo "Branch option ID for '$BRANCH': $BRANCH_OPTION_ID"
          fi
          
          STATUS_OPTION_ID=""
          if [ -n "$STATUS_OPTIONS" ]; then
            # Convert status to lowercase for case-insensitive matching
            STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
            STATUS_OPTION_ID=$(echo "$STATUS_OPTIONS" | jq -r 'select(.name|ascii_downcase=="'$STATUS_LOWER'") | .id' 2>/dev/null || echo "")
            echo "Status option ID for '$STATUS': $STATUS_OPTION_ID"
          fi
          
          # Look for this issue in the project
          echo "Looking for existing issue in the project..."
          ISSUE_TITLE="${{ github.event.issue.title }}"
          
          gh api graphql -f query='
            query {
              node(id: "'$PROJECT_ID'") {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          title
                          number
                          repository {
                            nameWithOwner
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ' | tee items.json
          
          # Find item ID for this issue
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO_NAME="${{ github.repository }}"
          
          ITEM_ID=$(jq -r '.data.node.items.nodes[] | select(
            .content.number=='$ISSUE_NUMBER' and 
            .content.repository.nameWithOwner=="'$REPO_NAME'"
          ) | .id' items.json 2>/dev/null || echo "")
          
          # If item not found, add it to the project
          if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" = "null" ]; then
            echo "Issue not found in project. Adding it..."
            
            gh api graphql -f query='
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "'$PROJECT_ID'",
                  contentId: "'${{ github.event.issue.node_id }}'"
                }) {
                  item {
                    id
                  }
                }
              }
            ' | tee add_item.json
            
            ITEM_ID=$(jq -r '.data.addProjectV2ItemById.item.id' add_item.json)
            echo "Added issue to project. Item ID: $ITEM_ID"
          else
            echo "Found existing issue in project. Item ID: $ITEM_ID"
          fi
          
          # Update fields
          if [ -n "$ITEM_ID" ] && [ "$ITEM_ID" != "null" ]; then
            # Update Branch field if we have both field ID and option ID
            if [ -n "$BRANCH_FIELD_ID" ] && [ -n "$BRANCH_OPTION_ID" ]; then
              echo "Updating Branch field..."
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "'$PROJECT_ID'",
                    itemId: "'$ITEM_ID'",
                    fieldId: "'$BRANCH_FIELD_ID'",
                    value: {
                      singleSelectOptionId: "'$BRANCH_OPTION_ID'"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '
              echo "Branch field updated."
            else
              echo "Skipping Branch field update. Missing field ID or option ID."
            fi
            
            # Update Version field
            if [ -n "$VERSION_FIELD_ID" ]; then
              echo "Updating Version field..."
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "'$PROJECT_ID'",
                    itemId: "'$ITEM_ID'",
                    fieldId: "'$VERSION_FIELD_ID'",
                    value: {
                      text: "'$VERSION'"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '
              echo "Version field updated."
            else
              echo "Skipping Version field update. Missing field ID."
            fi
            
            # Update Status field
            if [ -n "$STATUS_FIELD_ID" ] && [ -n "$STATUS_OPTION_ID" ]; then
              echo "Updating Status field..."
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "'$PROJECT_ID'",
                    itemId: "'$ITEM_ID'",
                    fieldId: "'$STATUS_FIELD_ID'",
                    value: {
                      singleSelectOptionId: "'$STATUS_OPTION_ID'"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '
              echo "Status field updated."
            else
              echo "Skipping Status field update. Missing field ID or option ID."
            fi
            
            # Update Repository field
            if [ -n "$REPO_FIELD_ID" ]; then
              echo "Updating Repository field..."
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "'$PROJECT_ID'",
                    itemId: "'$ITEM_ID'",
                    fieldId: "'$REPO_FIELD_ID'",
                    value: {
                      text: "'$REPO'"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '
              echo "Repository field updated."
            else
              echo "Skipping Repository field update. Missing field ID."
            fi
            
            echo "Project sync completed successfully."
          else
            echo "Failed to add issue to project. Check permissions."
            exit 1
          fi
