name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          # Use simpler pattern matching
          BRANCH=$(echo "$ISSUE_BODY" | sed -n '/### Branch/{n;n;p;}' | xargs)
          STATUS=$(echo "$ISSUE_BODY" | sed -n '/### Status/{n;n;p;}' | xargs)
          VERSION=$(echo "$ISSUE_BODY" | sed -n '/### Version/{n;n;p;}' | xargs)
          
          # Fallback with grep if sed fails
          if [ -z "$BRANCH" ]; then
            BRANCH=$(echo "$ISSUE_BODY" | grep -A2 '### Branch' | tail -n1)
          fi
          
          if [ -z "$STATUS" ]; then
            STATUS=$(echo "$ISSUE_BODY" | grep -A2 '### Status' | tail -n1)
          fi
          
          if [ -z "$VERSION" ]; then
            VERSION=$(echo "$ISSUE_BODY" | grep -A2 '### Version' | tail -n1)
          fi
          
          # Cleanup any whitespace
          BRANCH=$(echo "$BRANCH" | xargs)
          STATUS=$(echo "$STATUS" | xargs)
          VERSION=$(echo "$VERSION" | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          REPO="${{ github.repository }}"
          
          # Print the extracted values for debugging
          echo "Extracted values:"
          echo "Branch: '$BRANCH'"
          echo "Status: '$STATUS'"
          echo "Version: '$VERSION'"
          echo "Repository: '$REPO'"
          
          # Set outputs
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Create Final Summary
        if: steps.parse.outputs.status == 'done'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const branch = '${{ steps.parse.outputs.branch }}';
            const version = '${{ steps.parse.outputs.version }}';
            const status = '${{ steps.parse.outputs.status }}';
            const repo = '${{ steps.parse.outputs.repository }}';
            
            console.log('Values for summary:');
            console.log(`Branch: "${branch}"`);
            console.log(`Version: "${version}"`);
            console.log(`Status: "${status}"`);
            console.log(`Repository: "${repo}"`);
            
            // Create a summary comment with direct project link
            const projectUrl = 'https://github.com/orgs/Adama-com/projects/1';
            const projectName = 'VersionReleases';
            
            const commentBody = `
            # Version Release - ${status.toUpperCase()}
            
            This issue has been processed with the following details:
            
            - **Branch:** ${branch}
            - **Version:** ${version}
            - **Status:** ${status}
            - **Repository:** ${repo}
            
            ## Project Assignment
            
            Due to API permission limitations, please manually add this issue to the [${projectName}](${projectUrl}) project.
            
            To do this:
            1. Go to the [${projectName} project](${projectUrl})
            2. Click "Add items"
            3. Search for this issue (#${{ github.event.issue.number }}) and add it
            4. Set the following values:
               - Branch: ${branch}
               - Current Version: ${version} 
               - Status: ${status}
               - Repository: ${repo}
            `;
            
            // Add comment to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            
            console.log('Added summary comment to issue #' + context.issue.number);
            
            // Add status label
            try {
              const statusLabel = `status:${status.toLowerCase().replace(/\s+/g, '-')}`;
              
              try {
                // Try to get the label
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: statusLabel
                });
                
                console.log(`Label ${statusLabel} exists. Adding to issue...`);
              } catch (error) {
                // Label doesn't exist, create it
                console.log(`Label ${statusLabel} doesn't exist. Creating...`);
                
                // Generate a color based on status
                let color = '0075ca'; // default blue
                if (status.toLowerCase().includes('done')) {
                  color = '0e8a16'; // green
                } else if (status.toLowerCase().includes('progress')) {
                  color = 'fbca04'; // yellow
                }
                
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: statusLabel,
                  color: color,
                  description: `Issue with status: ${status}`
                });
                
                console.log(`Created label ${statusLabel}`);
              }
              
              // Add the label to the issue
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [statusLabel]
              });
              
              console.log(`Added label ${statusLabel} to issue #${context.issue.number}`);
            } catch (error) {
              console.log(`Error handling labels: ${error.message}`);
            }
            
            // Add branch label if needed
            try {
              if (branch) {
                const branchLabel = `branch:${branch.toLowerCase().replace(/\s+/g, '-')}`;
                
                try {
                  // Check if label exists
                  await github.rest.issues.getLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: branchLabel
                  });
                  
                  console.log(`Branch label ${branchLabel} exists.`);
                } catch (error) {
                  // Create the branch label
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: branchLabel,
                    color: 'e99695',
                    description: `Branch: ${branch}`
                  });
                  
                  console.log(`Created branch label ${branchLabel}`);
                }
                
                // Add the branch label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: [branchLabel]
                });
                
                console.log(`Added branch label ${branchLabel} to issue #${context.issue.number}`);
              }
            } catch (error) {
              console.log(`Error handling branch label: ${error.message}`);
            }
            
            // Add version label if needed
            try {
              if (version) {
                const versionLabel = `version:${version.replace(/\./g, '-')}`;
                
                try {
                  // Check if label exists
                  await github.rest.issues.getLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: versionLabel
                  });
                  
                  console.log(`Version label ${versionLabel} exists.`);
                } catch (error) {
                  // Create the version label
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: versionLabel,
                    color: '5319e7',
                    description: `Version: ${version}`
                  });
                  
                  console.log(`Created version label ${versionLabel}`);
                }
                
                // Add the version label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: [versionLabel]
                });
                
                console.log(`Added version label ${versionLabel} to issue #${context.issue.number}`);
              }
            } catch (error) {
              console.log(`Error handling version label: ${error.message}`);
            }
