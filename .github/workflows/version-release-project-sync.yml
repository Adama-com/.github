name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: extract
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse form fields
        id: parse
        run: |
          BRANCH=$(echo "$ISSUE_BODY" | grep -A1 '### Branch' | tail -n1 | xargs)
          STATUS=$(echo "$ISSUE_BODY" | awk '/### Status/{getline; while($0 ~ /^$/) { getline }; print $0 }' | xargs)
          STATUS_LOWER=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT

          VERSION=$(echo "$ISSUE_BODY" | grep -A1 '### Version' | tail -n1 | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$STATUS_LOWER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Sync with GitHub Project (VersionReleases)
        if: steps.parse.outputs.status == 'done'
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_PAT }}
        with:
          script: |
            const repo = '${{ steps.parse.outputs.repository }}';
            const branch = '${{ steps.parse.outputs.branch }}';
            const version = '${{ steps.parse.outputs.version }}';
            const status = '${{ steps.parse.outputs.status }}';
            const org = 'Adama-com';
            const projectNumber = 1;
            
            // Step 1: Get project metadata and all fields (basic only, no options)
            const projectData = await github.graphql(`
              query {
                organization(login: "${org}") {
                  projectV2(number: ${projectNumber}) {
                    id
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            title
                            repository {
                              nameWithOwner
                            }
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            __typename
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                    fields(first: 20) {
                      nodes {
                        id
                        name
                        __typename
                      }
                    }
                  }
                }
              }
            `);
            
            const project = projectData.organization.projectV2;
            const allFields = project.fields.nodes;
            
            // Step 2: fetch options for each single-select field
            for (const field of allFields) {
              if (field.__typename === 'ProjectV2SingleSelectField') {
                const result = await github.graphql(`
                  query ($id: ID!) {
                    node(id: $id) {
                      ... on ProjectV2SingleSelectField {
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                `, { id: field.id });
                field.options = result.node.options;
              }
            }

            function getOptionId(fieldName, value) {
              const field = fieldMap[fieldName];
              return field?.options?.find(opt => opt.name === value)?.id || null;
            }

            const match = project.items.nodes.find(item =>
              item.content?.repository?.nameWithOwner === repo &&
              item.fieldValues.nodes.some(f =>
                f.__typename === 'ProjectV2ItemFieldSingleSelectValue' &&
                f.name === branch &&
                f.field?.name === 'Branch'
              )
            );

            async function updateFields(itemId) {
              for (const [fieldName, value] of Object.entries({
                "Branch": branch,
                "Current Version": version,
                "Status": status,
                "Repository": repo
              })) {
                const field = fieldMap[fieldName];
                if (!field) continue;

                const input = {
                  projectId: project.id,
                  itemId: itemId,
                  fieldId: field.id,
                  value: {}
                };

                if (field.dataType === 'SINGLE_SELECT') {
                  const optionId = getOptionId(fieldName, value);
                  if (!optionId) continue;
                  input.value.singleSelectOptionId = optionId;
                } else if (field.dataType === 'TEXT') {
                  input.value.text = value;
                }

                await github.graphql(`
                  mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                    updateProjectV2ItemFieldValue(input: $input) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `, { input });
              }
            }

            if (match) {
              console.log("Item found — updating");
              await updateFields(match.id);
            } else {
              console.log("No match — creating new item");
              const newItem = await github.graphql(`
                mutation {
                  addProjectV2ItemById(input: {
                    projectId: "${project.id}",
                    contentId: "${{ github.event.issue.node_id }}"
                  }) {
                    item {
                      id
                    }
                  }
                }
              `);
              await updateFields(newItem.addProjectV2ItemById.item.id);
            }
