name: Sync Version Release to Project

on:
  issues:
    types: [opened]

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Parse issue fields
        id: parse
        run: |
          BODY="${{ github.event.issue.body }}"
          BRANCH=$(echo "$BODY" | sed -n '/### Branch/{n;n;p;}' | xargs)
          STATUS=$(echo "$BODY" | sed -n '/### Status/{n;n;p;}' | xargs)
          VERSION=$(echo "$BODY" | sed -n '/### Version/{n;n;p;}' | xargs)
          REPO="${{ github.repository }}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "status=$(echo "$STATUS" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "repository=$REPO" >> $GITHUB_OUTPUT

      - name: Skip if status is not Done
        if: steps.parse.outputs.status != 'done'
        run: echo "Status is not Done. Exiting."

      - name: Sync to VersionReleases project
        if: steps.parse.outputs.status == 'done'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_PAT }}
          script: |
            const org = 'Adama-com';
            const projectNumber = 1;
            const repo = '${{ steps.parse.outputs.repository }}';
            const branch = '${{ steps.parse.outputs.branch }}';
            const version = '${{ steps.parse.outputs.version }}';
            const status = '${{ steps.parse.outputs.status }}';
            const issueNodeId = '${{ github.event.issue.node_id }}';

            const project = await github.graphql(`
              query {
                organization(login: "${org}") {
                  projectV2(number: ${projectNumber}) {
                    id
                    fields(first: 20) {
                      nodes {
                        id
                        name
                        dataType
                        __typename
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            title
                            repository {
                              nameWithOwner
                            }
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            __typename
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                name
                              }
                            }
                            ... on ProjectV2ItemFieldTextValue {
                              text
                              field {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);

            const projectId = project.organization.projectV2.id;
            const fields = project.organization.projectV2.fields.nodes;
            const items = project.organization.projectV2.items.nodes;

            const fieldMap = Object.fromEntries(fields.map(f => [f.name, f]));

            function getFieldValue(item, name) {
              return item.fieldValues.nodes.find(n => n.field?.name === name);
            }

            async function getSingleSelectOptionId(field, value) {
              const result = await github.graphql(`
                query ($id: ID!) {
                  node(id: $id) {
                    ... on ProjectV2SingleSelectField {
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              `, { id: field.id });
              return result.node.options.find(opt => opt.name === value)?.id;
            }

            const match = items.find(item =>
              item.content?.repository?.nameWithOwner === repo &&
              getFieldValue(item, 'Branch')?.name === branch
            );

            async function updateItem(itemId) {
              const fieldValues = {
                'Branch': branch,
                'Current Version': version,
                'Status': status.charAt(0).toUpperCase() + status.slice(1),
                'Repository': repo
              };

              for (const [name, value] of Object.entries(fieldValues)) {
                const field = fieldMap[name];
                if (!field) continue;

                const input = {
                  projectId,
                  itemId,
                  fieldId: field.id,
                  value: {}
                };

                if (field.__typename === 'ProjectV2SingleSelectField') {
                  const optionId = await getSingleSelectOptionId(field, value);
                  if (!optionId) continue;
                  input.value.singleSelectOptionId = optionId;
                } else {
                  input.value.text = value;
                }

                await github.graphql(`
                  mutation ($input: UpdateProjectV2ItemFieldValueInput!) {
                    updateProjectV2ItemFieldValue(input: $input) {
                      projectV2Item { id }
                    }
                  }
                `, { input });
              }
            }

            if (match) {
              console.log("Matching item found. Updating...");
              await updateItem(match.id);
            } else {
              console.log("No match found. Creating new item...");
              const newItem = await github.graphql(`
                mutation {
                  addProjectV2ItemById(input: {
                    projectId: "${projectId}",
                    contentId: "${issueNodeId}"
                  }) {
                    item {
                      id
                    }
                  }
                }
              `);
              await updateItem(newItem.addProjectV2ItemById.item.id);
            }

      - name: Add summary + labels
        if: steps.parse.outputs.status == 'done'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = '${{ steps.parse.outputs.branch }}';
            const version = '${{ steps.parse.outputs.version }}';
            const status = '${{ steps.parse.outputs.status }}';
            const repo = '${{ steps.parse.outputs.repository }}';
            const issue_number = context.issue.number;

            const comment = `
            âœ… **Version release synced to project**
            
            - **Branch:** ${branch}
            - **Version:** ${version}
            - **Status:** ${status}
            - **Repository:** ${repo}
            
            Check it in the [VersionReleases Project](https://github.com/orgs/Adama-com/projects/1)
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body: comment
            });

            const labels = [
              `status:${status.toLowerCase().replace(/\s+/g, '-')}`,
              `branch:${branch.toLowerCase().replace(/\s+/g, '-')}`,
              `version:${version.replace(/\./g, '-')}`
            ];

            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label
                });
              } catch {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label,
                  color: 'c5def5',
                  description: `Auto label: ${label}`
                });
              }
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              labels
            });
