name: Process Version Update Form
on:
  issues:
    types: [opened, edited]

jobs:
  process-form:
    if: contains(github.event.issue.labels.*.name, 'version-update')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install @octokit/rest @octokit/graphql

      - name: Process form and update project
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const issueBody = issue.data.body;
            console.log("Processing issue:", context.issue.number);
            
            // Simple parsing - in production you'd want more robust parsing
            function extractField(body, fieldName) {
              const regex = new RegExp(`### ${fieldName}\\s*([^#]*)`);
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }
            
            // Extract data from form
            const repository = extractField(issueBody, 'Repository');
            const customer = extractField(issueBody, 'Customer Name');
            const version = extractField(issueBody, 'Version Number');
            const releaseDate = extractField(issueBody, 'Release Date');
            const status = extractField(issueBody, 'Status');
            const deployedBy = extractField(issueBody, 'Deployed By');
            const notes = extractField(issueBody, 'Notes');
            
            console.log(`Extracted data for ${customer} in ${repository}: version ${version}`);
            
            // In a real implementation, you would:
            // 1. Use GraphQL to find the project and item (if exists)
            // 2. Create or update the item
            // 3. Add error handling
            
            // For this example, we'll just comment on the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `âœ… Processed update request with these details:
              
              - Repository: ${repository}
              - Customer: ${customer}
              - Version: ${version}
              - Release Date: ${releaseDate}
              - Status: ${status}
              - Deployed By: ${deployedBy}
              
              Note: This is a placeholder. The actual project board update would happen here.`
            });
            
            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
